@page "/category/create"
@page "/category/update/{id:int}"
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py2">@(Id > 0 ? "Update" : "Create") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Category" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-floating" py-3 col-12>
                    <InputText @bind-Value="Category.Name" class="form-control" id="name" placeholder="Name" />
                    <label for="name">Name</label>
                    <ValidationMessage For="@(() => Category.Name)" />
                </div>
                <div class="row mt-3">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                            <i class="bi bi-floppy"></i> @(Id > 0 ? "Update" : "Create")
                        </button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a href="category" class="btn btn-secondary form-control" disabled="@IsProcessing">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine(firstRender);
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        if (Id > 0)
            Category = await CategoryRepository.GetAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        if (Id > 0)
        {
            await CategoryRepository.UpdateAsync(Category);
            await JSRuntime.ToastrSuccess("Category updated successfully");
        }
        else
        {
            await CategoryRepository.AddAsync(Category);
            await JSRuntime.ToastrSuccess("Category added successfully");
        }

        NavigationManager.NavigateTo("category");
    }
}
