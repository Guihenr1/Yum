@page "/product"
@using System.Globalization
@inject IProductRepository ProductRepository
@inject IJSRuntime JSRuntime

<Modal 
    OnModalConfirmation="ConfirmDelete_Click"
    ModalTitle="Delete Product"
    ModalBody="Are you sure you want to delete this product?"
    ModalButton="Delete"
    ModalButtonStyle="danger"
></Modal>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="product/create" class="btn btn-lg btn-secondary" style="width:250px"><i class="bi bi-file-plus"></i> Add New Product</a>
                </div>
            </div>
            @if (Products.Any())
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tags</th>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</td>
                                <td><span class="badge text-bg-info">@product.SpecialTag</span></td>
                                <td>@product.Category.Name</td>
                                <td class="text-center">
                                    <a href=@($"product/update/{product.Id}") class="btn btn-sm btn-primary"><i class="bi bi-pencil"></i> Edit</a>
                                    <button @onclick="() => HandlerDelete(product.Id)" class="btn btn-sm btn-danger"><i class="bi bi-trash"></i> Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No products found</p>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private IEnumerable<Product> Products { get; set; } = new List<Product>();
    private int ProductDeleteId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine(firstRender);
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        Products = await ProductRepository.GetAllAsync();
    }

    private void HandlerDelete(int id)
    {
        ProductDeleteId = id;
        JSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && ProductDeleteId > 0)
        {
            var result = await ProductRepository.DeleteAsync(ProductDeleteId);
            await JSRuntime.InvokeVoidAsync("HideConfirmationModal");

            if (result)
                await JSRuntime.ToastrSuccess("Product deleted successfully");
            else
                await JSRuntime.ToastrError("Product deletion failed");

            await LoadCategories();
        }

        ProductDeleteId = 0;
        IsProcessing = false;
    }
}
