@page "/product/create"
@page "/product/update/{id:int}"
@inject IProductRepository ProductRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment WebHostEnvironment

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py2">@(Id > 0 ? "Update" : "Create") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-floating py-3 col-12">
                    <InputText @bind-Value="Product.Name" class="form-control" id="name" placeholder="Name" />
                    <label for="name">Name</label>
                    <ValidationMessage For="@(() => Product.Name)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputText @bind-Value="Product.Description" class="form-control" id="description" placeholder="Description" />
                    <label for="description">Description</label>
                    <ValidationMessage For="@(() => Product.Description)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputNumber @bind-Value="Product.Price" class="form-control" id="price" placeholder="Price" />
                    <label for="price">Price</label>
                    <ValidationMessage For="@(() => Product.Price)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputText @bind-Value="Product.SpecialTag" class="form-control" id="special-tag" placeholder="Special Tag" />
                    <label for="special-tag">Special Tag</label>
                    <ValidationMessage For="@(() => Product.SpecialTag)" />
                </div>
                <div class="form-floating py-3 col-12">
                    <InputSelect @bind-Value="Product.CategoryId" class="form-control" id="category" placeholder="Category">
                        <option selected disabled value="0">Select Category</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <label for="category">Category</label>
                    <ValidationMessage For="@(() => Product.CategoryId)" />
                </div>
                <div class="form-floating py-3 col-12">
                    @if (string.IsNullOrEmpty(Product.ImageUrl))
                    {
                        <InputFile OnChange="LoadFiles" class="form-control" id="customFile" accept="image/x-png,image/jpeg"></InputFile>
                        <label for="customFile">Upload Image</label>
                    }

                    @if (!string.IsNullOrEmpty(Product.ImageUrl))
                    {
                        <div class="row pt-3">
                            <div class="col-3">
                                <img src="@Product.ImageUrl" class="img-thumbnail" alt="Product Image" />
                            </div>
                            <div class="col-md-9">
                                <i @onclick="DeleteImage" class="bi bi-trash btn btn-outline-danger">Remove</i>
                            </div>
                        </div>
                    }
                </div>
                <div class="row mt-3">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                            <i class="bi bi-floppy"></i> @(Id > 0 ? "Update" : "Create")
                        </button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    public bool IsProcessing { get; set; } = true;
    private string? _directoryPath { get; set; }

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "products");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine(firstRender);
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        if (Id > 0)
            Product = await ProductRepository.GetAsync(Id);

        Categories = await CategoryRepository.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        IsProcessing = true;
        if (Id > 0)
        {
            await ProductRepository.UpdateAsync(Product);
            await JSRuntime.ToastrSuccess("Product updated successfully");
        }
        else
        {
            await ProductRepository.AddAsync(Product);
            await JSRuntime.ToastrSuccess("Product added successfully");
        }

        NavigationManager.NavigateTo("product");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsProcessing = true;

        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
        if (!Directory.Exists(_directoryPath))
            Directory.CreateDirectory(_directoryPath);

        var path = Path.Combine(_directoryPath, newFileName);

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fs);
        Product.ImageUrl = $"/images/products/{newFileName}";

        IsProcessing = false;
    }

    void DeleteImage()
    {
        if (Product.ImageUrl == null)
            return;

        var fileToDelete = Product.ImageUrl.Split('/').Reverse().First();

        var filePathToDelete = Path.Combine(_directoryPath, fileToDelete);

        if (!File.Exists(filePathToDelete))
            return;

        File.Delete(filePathToDelete);

        Product.ImageUrl = null;
    }
}
